from random import shuffle   # randomize order of the list
from os import system, name   # used to clear the screen based on the operating system

# define the suits, ranks and their values

SUITS=("Hearts", "Diamonds","Spades","Clubs")
RANKS=( "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten",
    "Jack", "Queen", "King", "Ace")
VALUES={"Two":2,"Three":3, "Four":4, "Five":5, "Six":6, "Seven":7, "Eight":8, "Nine":9, "Ten":10,
    "Jack":10, "Queen":10, "King":10, "Ace":11}






class Card:
    # represent a single card with suit and rank
    def __init__(self,suit,rank):
        self.suit=suit
        self.rank=rank
       
    def __str__(self):      # return a string representation of the card
        return f"{self.rank} of {self.suit}"    
    
    
    
    

class Deck:
    
    # represent a deck of 52 automatically shuffled cards
    def __init__(self):
        self.deck=[Card(suit,rank) for suit in SUITS for rank in RANKS]
        
         # shuffle deck to ensure randomness
        shuffle(self.deck)    
        
         #  returns a single card from the deck    
    def deal_card(self): 
        return self.deck.pop()    
    
    
    
    
       
class Hand:
    
    # represent a player's or dealer's hand
    # track value in the hand and how many aces are in it
    def __init__(self):
        self.cards=[]
        self.value=0
        self.num_of_aces=0
        
         # add card to the hand and updates the hand total value and adjusting aces
    def add_card(self,card):
        self.cards.append(card)
        self.value+=VALUES[card.rank]
        if card.rank=="Ace":
            self.num_of_aces+=1
            
             # adjust ace value if hand exceeds 21 and handling it
        self.adjust_aces() 
    def adjust_aces(self):   
        ''' If the value of the hand exceeds 21 and there are Aces counted as 11,
        convert them to 1 by subtracting 10 from the total'''

        while self.num_of_aces>0 and self.value>21:
            self.value-=10
            self.num_of_aces-=1
            
            
            
            
                    
class Bets:
    
    # manage player's betting money
    def __init__(self):
        self.total=100
        self.bet=0
    def win_bet(self):       # increase total money by the current bet amount
        self.total+=self.bet
    def lose_bet(self):      # decrease total money by the current bet amount
          self.total-=self.bet      
          
          
          

def take_bet(player_bet):
    
    # make the user entering his bet amount and it gotta be a valid amount
    while True:
        try:
            user_bet=int(input(f"Enter your bet ( Available: {player_bet.total})"))
            if 0<user_bet<= player_bet.total:
                player_bet.bet=user_bet
                return
            else:
                print("Invalid bet amount.. Try again.")
        except ValueError:
            print("Please enter a valid integer")  
                  
                  
                  
                
def display_hand(name,hand,hide_first=False):
    
    # displaying cards in the hand
    # if hide_first is true, show the first card as [hidden card] (used for dealer's initial display)
    print(f"\n{name}'s Hand" , end=" ")
    if hide_first:
        # hide the first card. reveal the rest
        print(f"[Hidden card]", ", ".join(str(card) for card in hand.cards[1:] ) )
    else:
        # show all cards with total value
            print( ", ".join(str(card) for card in hand.cards) , f" (value: {hand.value})" )
            
            
            
            
         
         
def check_blackjack(hand):
    
    # return True if a hand is exactly two cards and got a value of 21 (a blackJack)
    return len(hand.cards)==2 and hand.value==21



def hit (deck , hand):
    
    #deal one card from the deck and add it to the hand
    hand.add_card(deck.deal_card())
    
    
def player_turn(deck,player_hand,player_bet):
    
    # allows player to keep hitting until they choose to stand or their hand value exceeds 21
    while player_hand.value<21:
        choice=input("[HIT | STAND]").lower()
        if choice == "hit":
             hit(deck,player_hand)
             display_hand("player",player_hand)
        elif choice=="stand":
            break
        else:
            print("Invalid choice, type 'HIT' or 'STAND'")
            
            
            

def dealer_turn(deck,dealer_hand)  :
    
    # dealer draws cards until dealer's hand value is at least 17
    while dealer_hand.value<17:
        hit(deck,dealer_hand)
        # show the dealer's hand after finishing drawing
    display_hand("dealer",dealer_hand)                   
             
        
        
        
        
def selecting_winner(player_hand, dealer_hand,player_bet):
    
    # comparing between player and dealer both final handsand decides a winner
    # updates the player total money based on the result 
    if player_hand.value>21:
        print("player busts! dealer wins!")
        player_bet.lose_bet()
    elif dealer_hand.value>21 or player_hand.value>dealer_hand.value:
         print("player wins!")
         player_bet.win_bet()
    elif player_hand.value<dealer_hand.value:
        print("dealer wins!")
        player_bet.lose_bet()
    else:
         print("it's a tie!")
            



               
                
def play_blackjack():
    
    # main function to play the blackJack game. initialize player's money.
    # loops through rounds until the player is out of money or chooses to quit.
    print("WELCOME TO BLACKJACK !")
    
    #creating a Bet object
    player_bet=Bets() 
    
    # continue playing as long as the player got money
    while player_bet.total>0: 
        
        #creating a Deck object
        deck=Deck()  
        
         #creating a player's hand object   
        player_hand=Hand()  
        
         #creating a dealer's hand object
        dealer_hand=Hand() 
        
         # make the player placing a bet   
        take_bet(player_bet)  
        
         # deal two cards to both player and dealer
        for _ in range(2):   
            player_hand.add_card(deck.deal_card())
            dealer_hand.add_card(deck.deal_card())
            
            # show player's hand and dealer's hand with first card hidden 
        display_hand("player",player_hand)
        display_hand("dealer",dealer_hand,hide_first=True) 
        
        # check if the player got a natural blackJack
        if check_blackjack(player_hand):
            print("BLACKJACK! PLAYER WINS!")
            player_bet.win_bet()
        else:
            
            #player take their turn (hit or stand)
            player_turn(deck,player_hand,player_bet) 
            # if player busts, reveal dealer's hand
            if player_hand.value>21:
                display_hand("dealer",dealer_hand)
                selecting_winner(player_hand,dealer_hand,player_bet)
                
                # if player stands and has not busted, dealer takes turn
            else:
                    print("dealer's turn..")
                    dealer_turn(deck,dealer_hand) 
                    selecting_winner(player_hand,dealer_hand,player_bet)
            
            # show updated money total
        print(f"player's money: {player_bet.total}")  
        
        # if player running out of money, end the game 
        if player_bet.total==0:
            print("out of money! GAME OVER")
            break
        
        # ask if the player wants to play again 
        again=input("\nPlay again?  (Y/N)").lower()
        if again == 'n':
            break
        system("cls" if name == "nt" else "clear")     # Clear screen based on the operating system
        
        
        
        # start the game
play_blackjack()            
             
                     
                                      
